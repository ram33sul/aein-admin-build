{"version":3,"file":"static/js/122.4cacef78.chunk.js","mappings":"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","sources":["webpack://frontend/./src/components/fragments/MoodDetails/MoodDetails.module.css?4ff3","components/fragments/MoodDetails/MoodDetails.tsx","webpack://frontend/./src/components/general/ErrorMessage/ErrorMessage.module.css?4416","components/general/ErrorMessage/ErrorMessage.tsx","webpack://frontend/./src/components/general/Alert/Alert.module.css?920a","components/general/Alert/Alert.tsx","customHooks/alert.tsx","customHooks/api.ts"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"container\":\"MoodDetails_container__wx-iI\",\"data-container\":\"MoodDetails_data-container__1Jb5S\",\"buttons-container\":\"MoodDetails_buttons-container__csn8I\"};","import { useNavigate, useSearchParams } from 'react-router-dom';\nimport useApi from '../../../customHooks/api';\nimport { Mood } from '../../../interfaces';\nimport styles from './MoodDetails.module.css';\nimport Loading from '../../general/Loading/Loading';\nimport Input from '../../general/Input/Input';\nimport { ChangeEvent, useEffect, useState } from 'react';\nimport ErrorMessage from '../../general/ErrorMessage/ErrorMessage';\nimport ButtonOne from '../../general/ButtonOne/ButtonOne';\nimport useAlert from '../../../customHooks/alert';\nimport ButtonTwo from '../../general/ButtonTwo/ButtonTwo';\n\nfunction MoodDetails() {\n\n    const [ searchParams ] = useSearchParams();\n    const id = searchParams.get(\"id\");\n\n    const navigate = useNavigate()\n\n    const [ mood, moodError, moodLoading ] = useApi<Mood>({\n        url: `/moodDetails?id=${id}`\n    })\n\n    const [ name, setName ] = useState<string>('');\n    const [ color, setColor ] = useState<string>('');\n    const [ status, setStatus ] = useState<boolean>(false);\n    const [ editting, setEditting ] = useState<boolean>(false);\n\n    const [ nameError, setNameError ] = useState<string>('');\n    const [ colorError, setColorError ] = useState<string>('');\n\n    const { alert, AlertComponent } = useAlert();\n\n    const [ removeMood, removeMoodError, removeMoodLoading, doRemoveMood ]  = useApi<Mood>({\n        url: '/removeMood',\n        options: {\n            data: {\n                id\n            },\n            method: 'PATCH'\n        },\n        fetch: false\n    })\n\n    const [ recallMood, recallMoodError, recallMoodLoading, doRecallMood ] = useApi<Mood>({\n        url: '/recallMood',\n        options: {\n            data: {\n                id\n            },\n            method: 'PATCH'\n        },\n        fetch: false\n    })\n\n    const [ saveEditMood , saveEditMoodError, saveEditMoodLoading, doSaveEditMood ] = useApi<Mood>({\n        url: '/editMood',\n        options: {\n            data: {\n                id,\n                name,\n                color\n            },\n            method: 'PATCH'\n        },\n        fetch: false\n    })\n\n    const resetErrors = () => {\n        setNameError('');\n        setColorError('');\n    }\n    const handleCancelEdit = () => {\n        resetErrors()\n        setEditting(false);\n        if(mood){\n            setName(mood?.name);\n            setColor(mood?.color)\n            setStatus(mood?.status);\n        }\n    }\n\n    const handleSaveEdit = () => {\n        resetErrors()\n        if(name === mood?.name && color === mood?.color){\n            alert({\n                backgroundColor: 'red',\n                message: \"No changes to save\"\n            })\n        } else {\n            doSaveEditMood()\n        }\n    }\n\n    const handleRemove = () => {\n        doRemoveMood();\n    }\n\n    const handleRecall = () => {\n        doRecallMood()\n    }\n\n    useEffect(() => {\n        resetErrors()\n        if(mood){\n            setName(mood?.name);\n            setColor(mood?.color)\n            setStatus(mood?.status);\n        }\n    },[mood]);\n\n    useEffect(() => {\n        resetErrors()\n        if(removeMood){\n            setStatus(removeMood.status);\n            alert({\n                backgroundColor: 'green',\n                message: `Mood successfully removed`\n            })\n        } else if (removeMoodError){\n            alert({\n                backgroundColor: \"red\",\n                message: \"Some error occured while removing\"\n            })\n        }\n    },[removeMood, removeMoodError])\n\n    useEffect(() => {\n        resetErrors()\n        if(recallMood){\n            setStatus(recallMood.status)\n            alert({\n                backgroundColor: 'green',\n                message: `Mood successfully recalled`\n            })\n        } else if (recallMoodError){\n            alert({\n                backgroundColor: \"red\",\n                message: \"Some error occured while recalling\"\n            })\n        }\n    },[recallMood, recallMoodError])\n\n    useEffect(() => {\n        if(saveEditMood){\n            setName(saveEditMood.name);\n            setColor(saveEditMood.color);\n            setEditting(false)\n            alert({\n                backgroundColor: 'green',\n                message: 'Mood successfully edited'\n            })\n        } else if (saveEditMoodError){\n            if(Array.isArray(saveEditMoodError.response?.data)){\n                const errors: [] = saveEditMoodError.response?.data as [];\n                errors.forEach((error: {field: string, message: string}) => {\n                    if(error.field === 'name'){\n                        setNameError(error.message)\n                    } else if (error.field === 'color'){\n                        setColorError(error.message)\n                    }\n                })\n            } else {\n                alert({\n                    backgroundColor: \"red\",\n                    message: \"Some error occured while saving\"\n                })\n            }\n        }\n    },[saveEditMood, saveEditMoodError])\n\n    return (\n        <div className={styles.container}>\n            {\n                AlertComponent\n            }\n            {   \n                moodError ? <ErrorMessage text='Some error occured' /> :\n                moodLoading ? <Loading color='black' /> : <>\n                <div className={styles[\"data-container\"]}>\n                    <div className={styles.id}>\n                        Id: <strong style={{color}}>{mood?._id ?? ''}</strong>\n                    </div>\n                    <div className={styles.status}>\n                        Status: <strong style={{color: status ? 'green' : 'red'}}>{status ? 'Active' : 'Not-active'}</strong>\n                    </div>\n                    <Input error={nameError} readonly={!editting} width='100%' label='Name' value={name} onChange={(e: ChangeEvent<HTMLInputElement>) =>{ setNameError(''); setName(e.target.value)}} />\n                    <Input error={colorError} readonly={!editting} width='100%' label='Color' value={color} onChange={(e: ChangeEvent<HTMLInputElement>) =>{ setColorError(''); setColor(e.target.value)}} />\n                    {\n                        !editting ?\n                        <div className={styles[\"buttons-container\"]}>\n                            <ButtonOne width='50%' text='Edit' onClick={() => setEditting(true)}/>\n                            {\n                                status ?\n                                <ButtonOne loading={removeMoodLoading} width='50%' color='red' text='Remove' type='reject' onClick={handleRemove}/> :\n                                <ButtonOne loading={recallMoodLoading} width='50%' color='green' text='Recall' type='reject' onClick={handleRecall}/>\n                            }\n                        </div> :\n                            <div className={styles[\"buttons-container\"]}>\n                            <ButtonOne loading={saveEditMoodLoading} width='50%' text='Save' onClick={handleSaveEdit}/>\n                            <ButtonOne width='50%' text='Cancel' type='reject' onClick={handleCancelEdit}/>\n                        </div>\n                    }\n                    <ButtonTwo text='GO BACK' onClick={() => navigate(-1)} />\n                </div> </>\n            }\n        </div>\n    )\n}\n\nexport default MoodDetails;","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"ErrorMessage_container__9e608\"};","import styles from './ErrorMessage.module.css';\nimport React from 'react'\ninterface props {\n    size?: string, \n    text?: string\n}\nfunction ErrorMessage({size = '20px', text = 'Try again'}: props){\n    const src = require(`../../../images/icons/error-red.png`);\n    return (\n        <div className={styles.container}>\n            <img src={src} alt='error' style={{maxWidth: size, maxHeight: size}}/>\n            <div className={styles.text} style={{fontSize: size}}>\n                {text}\n            </div>\n        </div>\n    )\n}\n\nexport default ErrorMessage;","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"Alert_container__37xgO\",\"container-animation\":\"Alert_container-animation__q+ca7\"};","import styles from './Alert.module.css';\n\nexport interface Props {\n    backgroundColor: string;\n    message: string;\n}\n\nfunction Alert({backgroundColor, message}: Props): JSX.Element{\n\n    backgroundColor = `var(--${backgroundColor}-color)`;\n    return (\n        <div className={styles.container} style={{backgroundColor}}>\n            {message}\n        </div>\n    )\n}\n\nexport default Alert;","import { useCallback, useState } from \"react\";\nimport Alert, { Props } from \"../components/general/Alert/Alert\";\n\nfunction useAlert(){\n\n    const [ isVisible, setIsVisible ] = useState<boolean>(false);\n    const [ alertProps, setAlertProps ] = useState<Props>({\n        backgroundColor: \"black\",\n        message: \"message\"\n    })\n    const [ timeoutId, setTimeoutId ] = useState<number | undefined >();\n    \n    const alert = useCallback((props: Props) => {\n\n        clearTimeout(timeoutId)\n        setAlertProps(props)\n        setIsVisible(true);\n        const timeout = window.setTimeout(() => {\n            setIsVisible(false);\n        }, 2000)\n        setTimeoutId(timeout);\n    },[timeoutId])\n\n\n    const AlertComponent = isVisible ? <Alert {...alertProps} /> : null;\n\n    return { AlertComponent, alert };\n}\n\nexport default useAlert;","import { useState, useEffect, useCallback } from 'react';\nimport axios, { AxiosRequestConfig, AxiosResponse, AxiosError, CancelTokenSource} from 'axios';\n\ninterface useApiProps {\n    url: string,\n    options?: AxiosRequestConfig,\n    fetch?: boolean\n}\n\ntype useApiOutput<T> = [\n    T | null,\n    AxiosError | null,\n    boolean,\n    () => void,\n    (() => void) | undefined\n]\n\nfunction useApi<T>({url, options = { method: 'GET'}, fetch = true}: useApiProps): useApiOutput<T>{\n\n    const [ response, setResponse ] = useState<T | null>(null);\n    const [ error, setError ] = useState<AxiosError | null>(null);\n    const [ loading, setLoading ] = useState<boolean>(fetch);\n    const [ cancel, setCancel ] = useState<CancelTokenSource | null>(null);\n    const [ shouldFetch, setShouldFetch ] = useState<boolean>(fetch);\n    const [ fetchAgain, setFetchAgain ] = useState<boolean>(false)\n\n    const doFetch = useCallback(() => {\n        setShouldFetch(true);\n        setLoading(true);\n        setFetchAgain(prev => !prev);\n    },[])\n\n    useEffect(() => {\n        const source = axios.CancelToken.source();\n        setCancel(source);\n        if(shouldFetch){\n            axios(url,{\n                ...options,\n                cancelToken: source.token\n            }).then((res: AxiosResponse) => {\n                setResponse(res.data)\n                setLoading(false)\n            }).catch((error) => {\n                if(!axios.isCancel(error)){\n                    setError(error)\n                    setLoading(false)\n                }\n            })\n        }\n        \n        return () => {\n            source.cancel(\"API Request was cancelled!\")\n        }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    },[shouldFetch, fetchAgain])\n\n    return [ response, error, loading, doFetch, cancel?.cancel ]\n}\n\nexport default useApi;"],"names":["_mood$_id","_useSearchParams","useSearchParams","id","_slicedToArray","get","navigate","useNavigate","_useApi","useApi","url","concat","_useApi2","mood","moodError","moodLoading","_useState","useState","_useState2","name","setName","_useState3","_useState4","color","setColor","_useState5","_useState6","status","setStatus","_useState7","_useState8","editting","setEditting","_useState9","_useState10","nameError","setNameError","_useState11","_useState12","colorError","setColorError","_useAlert","useAlert","alert","AlertComponent","_useApi3","options","data","method","fetch","_useApi4","removeMood","removeMoodError","removeMoodLoading","doRemoveMood","_useApi5","_useApi6","recallMood","recallMoodError","recallMoodLoading","doRecallMood","_useApi7","_useApi8","saveEditMood","saveEditMoodError","saveEditMoodLoading","doSaveEditMood","resetErrors","useEffect","backgroundColor","message","_saveEditMoodError$re","_saveEditMoodError$re2","Array","isArray","response","forEach","error","field","_jsxs","className","styles","children","_jsx","ErrorMessage","text","Loading","_Fragment","style","_id","Input","readonly","width","label","value","onChange","e","target","ButtonOne","loading","onClick","type","ButtonTwo","_ref","_ref$size","size","_ref$text","src","require","alt","maxWidth","maxHeight","fontSize","isVisible","setIsVisible","alertProps","setAlertProps","timeoutId","setTimeoutId","useCallback","props","clearTimeout","timeout","window","setTimeout","Alert","_objectSpread","_ref$options","_ref$fetch","setResponse","setError","setLoading","cancel","setCancel","shouldFetch","setShouldFetch","fetchAgain","setFetchAgain","doFetch","prev","source","axios","cancelToken","token","then","res","catch"],"sourceRoot":""}